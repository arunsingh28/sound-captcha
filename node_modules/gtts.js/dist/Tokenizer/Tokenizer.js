"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Tokenizer {
    constructor(regexFuncs, flags = "i") {
        this.regexFuncs = regexFuncs;
        this.flags = flags;
        try {
            // Combine
            this.totalRegex = this.combineRegex();
        }
        catch (err) {
            throw new TypeError("Tokenizer() expects a list of functions returning " +
                "regular expression objects (i.e. re.compile). " + err);
        }
    }
    run(text) {
        return text.split(this.totalRegex);
    }
    toString() {
        return `${this.totalRegex.source} from: ${this.regexFuncs}`;
    }
    combineRegex() {
        const alts = [];
        for (const func of this.regexFuncs) {
            alts.push(func());
        }
        const pattern = alts.map((alt) => alt.source).join("|");
        return new RegExp(pattern, this.flags);
    }
}
exports.Tokenizer = Tokenizer;
/*
export * from "./PreProcessorRegex";
export * from "./PreProcessorSub";
export * from "./RegexBuilder";
export * from "./Symbols";
*/
