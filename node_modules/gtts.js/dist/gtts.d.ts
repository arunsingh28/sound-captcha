/**
 * gTTS -- Google Text-to-Speech.
 *
 * An interface to Google Translate's Text-to-Speech API.
 *
 * @export
 * @class gTTS
 */
export declare class gTTS {
    private GOOGLE_TTS_MAX_CHARS;
    private GOOGLE_TTS_URL;
    private GOOGLE_TTS_HEADERS;
    private text;
    private speed;
    private preProcessorFuncs;
    private tokenizerFunc;
    private langList;
    private token;
    private lang;
    /**
     * Creates an instance of gTTS.
     *
     * @param {string} text
     * The text to be read.
     * @param {string} [lang]
     * The language (IETF language tag) to
     * read the text in. Defaults to 'en'.
     * @param {boolean} [slow]
     * Reads text more slowly. Defaults to `false`.
     * @param {boolean} [langCheck]
     * Strictly enforce an existing `lang`,
     * to catch a language error early. If set to `true`,
     * a `ValueError` is raised if `lang` doesn't exist.
     * Default is `true`.
     * @param {Array<(text: string) => string>} [preProcessorFuncs]
     * A list of zero or more functions that are
     * called to transform (pre-process) text before tokenizing. Those
     * functions must take a string and return a string. Defaults to:
     * ```
     *     [
     *         PreProcessors.toneMarks,
     *         PreProcessors.endOfLine,
     *         PreProcessors.abbreviations,
     *         PreProcessors.wordSub,
     *     ]
     * ```
     * @param {(text: string) => string[]} [tokenizerFunc]
     * A function that takes in a string and
     * returns a list of string (tokens). Defaults to:
     * ```
     *     Tokenizer([
     *         tokenizer_cases.tone_marks,
     *         tokenizer_cases.period_comma,
     *         tokenizer_cases.colon,
     *         tokenizer_cases.other_punctuation
     *     ]).run
     * ```
     * @memberof gTTS
     */
    constructor(text: string, lang?: string, slow?: boolean, langCheck?: boolean, preProcessorFuncs?: Array<(text: string) => string>, tokenizerFunc?: (text: string) => string[]);
    save(savefile: string): Promise<void>;
    /**
     * Do the TTS API request and write bytes to a file-like object.
     *
     * @private
     * @param {string} savefile file path to write the `mp3` to.
     * @memberof gTTS
     */
    private process;
    private tokenize;
}
