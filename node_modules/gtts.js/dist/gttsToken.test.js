"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @jest-environment node
 */
const axios_1 = require("axios");
require("jest");
const gttsToken_1 = require("./gttsToken");
describe("Test gttsToken", () => {
    const tokenizer = new gttsToken_1.Token();
    test("Verify gtts Token 1", () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield tokenizer.calculateToken("test", "406986.2817744745");
        expect(data).toBe("278125.134055");
    }));
    test("Verify gtts Token 2", () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield tokenizer.calculateToken("test2", "432709.1557755164");
        expect(data).toBe("914741.749424");
    }));
    test("Verify fetched Token key", () => __awaiter(this, void 0, void 0, function* () {
        // expect.assertions(1);
        const text = "Hello";
        const token = yield tokenizer.calculateToken(text);
        const payload = {
            client: "t",
            q: text,
            tk: token,
            tl: "en",
        };
        const r = yield axios_1.default.get("https://translate.google.com/translate_tts", {
            params: payload,
        });
        expect(r.status).toBe(200);
    }));
});
