"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
/**
 * Token (Google Translate Token)
 * Generate the current token key and allows generation of tokens (tk) with it
 * Python version of `token-script.js` itself from translate.google.com
 *
 * @export
 * @class Token
 */
class Token {
    constructor() {
        this.tokenKey = null;
    }
    /**
     * Calculate the request token (`tk`) of a string
     *
     * @param {string} text The text to calculate a token for
     * @param {string|null} [seed=null] The seed to use. By default this is the number of hours since epoch
     * @memberof Token
     */
    calculateToken(text, seed = null) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Deobfuscate script
            const xr = (a) => {
                return () => {
                    return a;
                };
            };
            const yr = (a, b) => {
                for (let c = 0; c < b.length - 2; c += 3) {
                    let d = b.charAt(c + 2);
                    d = "a" <= d ? d.charCodeAt(0) - 87 : Number(d);
                    d = "+" === b.charAt(c + 1) ? a >>> d : a << d;
                    a = "+" === b.charAt(c) ? a + d & 4294967295 : a ^ d;
                }
                return a;
            };
            let zr = null;
            const Ar = (a) => __awaiter(this, void 0, void 0, function* () {
                let b;
                if (null !== zr) {
                    b = zr;
                }
                else {
                    b = yield this.getTokenKey();
                }
                let d = xr(String.fromCharCode(116));
                let c = xr(String.fromCharCode(107));
                d = [d(), d()];
                d[1] = c();
                c = "&" + d.join("") + "=";
                d = b.split(".");
                b = Number(d[0]) || 0;
                // tslint:disable-next-line: no-var-keyword
                for (var e = [], f = 0, g = 0; g < a.length; g++) {
                    let l = a.charCodeAt(g);
                    // tslint:disable-next-line: max-line-length
                    128 > l ? e[f++] = l : (2048 > l ? e[f++] = l >> 6 | 192 : (55296 === (l & 64512) && g + 1 < a.length && 56320 === (a.charCodeAt(g + 1) & 64512) ? (l = 65536 + ((l & 1023) << 10) + (a.charCodeAt(++g) & 1023),
                        e[f++] = l >> 18 | 240,
                        e[f++] = l >> 12 & 63 | 128) : e[f++] = l >> 12 | 224,
                        e[f++] = l >> 6 & 63 | 128),
                        e[f++] = l & 63 | 128);
                }
                a = b;
                for (f = 0; f < e.length; f++) {
                    a += e[f];
                    a = yr(a, "+-a^+6");
                }
                a = yr(a, "+-3^+b+-f");
                a ^= Number(d[1]) || 0;
                // tslint:disable-next-line: no-unused-expression
                0 > a && (a = (a & 2147483647) + 2147483648);
                a %= 1E6;
                return (a.toString() + "." + (a ^ b));
            });
            zr = seed;
            return yield Ar(text);
        });
    }
    getTokenKey() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.tokenKey !== null) {
                return this.tokenKey;
            }
            const resp = yield axios_1.default.get("https://translate.google.com/");
            const tkkExprMatch = resp.data.match(/(tkk:.*?),/);
            let tkkExpr;
            if (tkkExprMatch === null) {
                throw new Error("Unable to find token seed! Did https://translate.google.com change?");
            }
            tkkExpr = tkkExprMatch[0];
            const tokenMatch = tkkExpr.match(/\d{6}\.[0-9]+/);
            let token;
            if (tokenMatch !== null) {
                token = tokenMatch[0];
            }
            else {
                const timestamp = Math.floor(+new Date() / 1000);
                const hours = Math.floor(timestamp / 3600);
                const aMatch = tkkExpr.match(/a\\\\x3d(-?\d+);/);
                const a = aMatch !== null ? parseInt(aMatch[0], 10) : 0;
                const bMatch = tkkExpr.match(/b\\\\x3d(-?\d+);/);
                const b = bMatch !== null ? parseInt(bMatch[0], 10) : 0;
                token = `${hours}.${a + b}`;
            }
            this.tokenKey = token;
            return token;
        });
    }
}
exports.Token = Token;
